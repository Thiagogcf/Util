// Decompiled with JetBrains decompiler
// Type: GescooperIntegradorSoAutomacao.Worker
// Assembly: GescooperIntegradorSoAutomacao, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 909F12D1-E746-473C-9804-737F518E2BA0
// Assembly location: C:\Users\Infogen\Desktop\ManagerSoAutomacao\GescooperIntegradorSoAutomacao.dll

using Gescooper.Biblioteca.Models;
using GesCooper.Manager.Sigafran.Acesso;
using GesCooper.Manager.Sigafran.Models;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;


#nullable enable
namespace GesCooper.Manager.Sigafran.Aplicacao
{
    public class Worker : BackgroundService
    {
        private readonly ILogger<Worker> _logger;
        private TokenModel? token = new TokenModel();


        private readonly ILoggerFactory _loggerFactory;

        public Worker(ILoggerFactory loggerFactory)
        {
            _loggerFactory = loggerFactory;
            _logger = _loggerFactory.CreateLogger<Worker>();
        }

        public override Task StartAsync(CancellationToken cancellationToken)
        {
            _logger.LogInformation($"Worker started at: {DateTimeOffset.Now}. CancellationToken -> {cancellationToken.IsCancellationRequested}");
            return base.StartAsync(cancellationToken);
        }

        public override Task StopAsync(CancellationToken cancellationToken)
        {
            _logger.LogInformation($"Worker stopped at: {DateTimeOffset.Now}. CancellationToken -> {cancellationToken.IsCancellationRequested}");
            return base.StopAsync(cancellationToken);
        }

        protected override async Task ExecuteAsync(CancellationToken cancellationToken)
        {

            RetornoBuscarConfiguracaoIntegracaoAPIsSigaFranViewModel processosConfigurados = new RetornoBuscarConfiguracaoIntegracaoAPIsSigaFranViewModel();
            try
            {
                ConexaoCfg conexaoCfg = ConexaoFabrica.Criar();
                string api = conexaoCfg.ConfApi;
                string usuario = conexaoCfg.Usuario;
                string senha = conexaoCfg.Senha;
                string filial = conexaoCfg.Filial;
                int segundosIntervaloSinconizacao = 30;
                //string Empresa = conexaoCfg.Empresa.ToLower();

                JsonSerializerOptions options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                };

                var listaBak = new List<RetornoBuscarProgramacoesPendentesNaoFinalizadasSigaFranViewModel>();

                while (!cancellationToken.IsCancellationRequested)
                {
                    try
                    {
                        var consulta = new Consulta(_loggerFactory);
                        string token = consulta.PegaToken(api, usuario, senha);

                        processosConfigurados = await consulta.BuscarConfiguracoesProcessos(token, filial, api);
                        if (processosConfigurados.intervaloSincronizacao > 0)
                            segundosIntervaloSinconizacao = processosConfigurados.intervaloSincronizacao;

                        if (processosConfigurados.configuracaoAtiva)
                        {
                            if (processosConfigurados.flagIntegracaoCarga > 0)
                            {
                                _logger.LogInformation($"Worker running at BuscaPedidosGx: {DateTimeOffset.Now}.");
                                await consulta.BuscaPedidosGx(token, filial, api);

                                _logger.LogInformation($"Worker running at Atualiza: {DateTimeOffset.Now}.");
                                await consulta.Atualiza(token, filial, processosConfigurados.flagIntegracaoCarga, api);
                            }

                            if (processosConfigurados.flagIntegracaoOrdemProducao > 0)
                            {
                                _logger.LogInformation($"Worker running at BuscarErros: {DateTimeOffset.Now}.");
                                listaBak = await consulta.BuscarErros(token, filial, api, options, listaBak);

                                _logger.LogInformation($"Worker running at BuscarFicha: {DateTimeOffset.Now}.");
                                await consulta.BuscaFicha(token, filial, api, options);

                                _logger.LogInformation($"Worker running at AtualizarProducao: {DateTimeOffset.Now}.");
                                await consulta.AtualizaProducao(token, filial, api, options);
                            }
                        }
                        _logger.LogInformation($"Worker running at Task.Delay: {DateTimeOffset.Now}.");
                    }
                    catch (Exception ex)
                    {
                        string erro = $"Worker exception while at: {DateTimeOffset.Now}.\n\n{ex.Message}\n\n{ex.InnerException}\n\n{ex.StackTrace}\n\n";
                        _logger.LogInformation(erro);
                        EmailLib.EnviarEmail(erro, _logger, processosConfigurados);
                    }
                    _logger.LogInformation($"Worker running at Task.Delay: {DateTimeOffset.Now}.");

                    await Task.Delay(segundosIntervaloSinconizacao * 1000, cancellationToken); // segundosIntervaloSinconizacao em segundos
                }


                _logger.LogInformation($"Worker finished while at: {DateTimeOffset.Now}. CancellationToken -> {cancellationToken.IsCancellationRequested}");
            }
            catch (Exception ex)
            {
                string erro = $"Worker exception at: {DateTimeOffset.Now}.\n\n{ex.Message}\n\n{ex.InnerException}\n\n{ex.StackTrace}\n\n";
                _logger.LogInformation(erro);
                EmailLib.EnviarEmail(erro, _logger, processosConfigurados);
            }

        }
    }
}
// Decompiled with JetBrains decompiler
// Type: GescooperIntegradorSoAutomacao.Acesso.Consulta
// Assembly: GescooperIntegradorSoAutomacao, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 909F12D1-E746-473C-9804-737F518E2BA0
// Assembly location: C:\Users\Infogen\Desktop\ManagerSoAutomacao\GescooperIntegradorSoAutomacao.dll

using Gescooper.Biblioteca.Models;
using GesCooper.Industria.Web.Controllers.Api.Models;
using GesCooper.Manager.Sigafran.Dominios;
using GesCooper.Manager.Sigafran.Entidades;
using GesCooper.Manager.Sigafran.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;


#nullable enable
namespace GesCooper.Manager.Sigafran.Acesso
{
    public class Consulta
    {

        private static ILoggerFactory _loggerFactory;
        private readonly ILogger<Consulta> _logger;

        public Consulta(ILoggerFactory loggerFactory)
        {
            _loggerFactory = loggerFactory;

            _logger = _loggerFactory.CreateLogger<Consulta>();
        }

        public string PegaToken(string api, string Usuario, string Senha)
        {
            WebRequest webRequest = WebRequest.Create($"http://{api}/Cadastro/api/Token");
            webRequest.Method = "POST";
            byte[] bytes = Encoding.UTF8.GetBytes("{\"usuario\": \"" + Usuario + "\", \"senha\": \"" + Senha + "\"}");
            Stream requestStream = webRequest.GetRequestStream();
            requestStream.Write(bytes, 0, bytes.Length);
            requestStream.Close();
            webRequest.ContentType = "application/json";
            WebResponse response = webRequest.GetResponse();
            Console.WriteLine(((HttpWebResponse)response).StatusDescription);

            using (Stream responseStream = response.GetResponseStream())
                return JsonSerializer.Deserialize<TokenModel>(new StreamReader(responseStream).ReadToEnd()).token.ToString();
        }


        public async Task<RetornoBuscarConfiguracaoIntegracaoAPIsSigaFranViewModel> BuscarConfiguracoesProcessos(string token, string filial, string api)
        {
            try
            {
                using (var client = new HttpClient() { DefaultRequestHeaders = { Authorization = new AuthenticationHeaderValue("Bearer", token) } })
                {
                    string stringAsync = await client.GetStringAsync($"http://{api}/Cadastro/Api/IntegracaoSigaFran/BuscarConfiguracaoProcessosIntegracao/?filialCodigo={filial}");

                    if (!(stringAsync.ToString() != "[]"))
                        return new RetornoBuscarConfiguracaoIntegracaoAPIsSigaFranViewModel();

                    Console.WriteLine(stringAsync);
                    var dados = JsonSerializer.Deserialize<RetornoBuscarConfiguracaoIntegracaoAPIsSigaFranViewModel>(stringAsync);
                    if (dados == null)
                        return new RetornoBuscarConfiguracaoIntegracaoAPIsSigaFranViewModel();

                    return dados;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro - BuscarConfiguracoesProcessos...\n\n{ex.Message}\n\n{ex.InnerException}");
                return new RetornoBuscarConfiguracaoIntegracaoAPIsSigaFranViewModel();
            }
        }



        public async Task<bool> BuscaPedidosGx(string token, string filial, string api)
        {
            try
            {
                using (var client = new HttpClient() { DefaultRequestHeaders = { Authorization = new AuthenticationHeaderValue("Bearer", token) } })
                {
                    string stringAsync = await client.GetStringAsync($"http://{api}/Comercial/Api/SoAutomacao/GetPedidosSoAutomacao/{filial}");

                    Console.WriteLine("Buscando pedidos...");
                    if (!(stringAsync.ToString() != "[]"))
                        return false;
                    Console.WriteLine(stringAsync);
                    CadastraPedidosGx(JsonSerializer.Deserialize<List<OrdemExpedicao>>(stringAsync));
                    SituacaoPedido(token, filial, api);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.InnerException);
                return false;
            }

            return true;
        }

        public void CadastraPedidosGx(List<OrdemExpedicao> pedidos)
        {
            using (ConexaoCfg conexaoCfg = ConexaoFabrica.Criar())
            {
                foreach (OrdemExpedicao pedido in pedidos)
                {
                    try
                    {
                        Console.WriteLine("Cadastrando pedido");
                        pedido.dtModificacao = DateTime.Now;
                        conexaoCfg.Entry<OrdemExpedicao>(pedido).State = EntityState.Added;
                        conexaoCfg.SaveChanges();
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.Message);
                        Console.WriteLine(ex.InnerException);
                    }
                }
            }
        }

        public async Task<bool> SituacaoPedido(string token, string filial, string api)
        {
            using (HttpClient httpClient = new HttpClient())
            {
                httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                try
                {
                    Console.WriteLine("Alterando situação do pedido");
                    var retorno = await httpClient.GetStringAsync($"http://{api}/Comercial/Api/SoAutomacao/SitParaEnviado/{filial}");
                    Console.WriteLine(retorno);
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.InnerException);
                    return false;
                }

                return true;
            }
        }

        public async Task<bool> Atualiza(string token, string filial, TipoSigaFranIntegracaoCarga empresa, string api)
        {
            try
            {
                using (HttpClient client = new HttpClient())
                {
                    client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                    string retorno = await client.GetStringAsync($"http://{api}/Comercial/Api/SoAutomacao/GetPedidosEnviado/{filial}");
                    var listaRetorno = JsonSerializer.Deserialize<List<ExpedicaoModel>>(retorno);
                    Console.WriteLine("ListaRetorno");
                    Console.WriteLine(listaRetorno);
                    Console.WriteLine("ListaRetorno");
                    foreach (var soAutomacaoModel in listaRetorno)
                    {
                        try
                        {
                            using (var contexto = ConexaoFabrica.Criar(_loggerFactory))
                            {
                                string connectionString = contexto.ConnectionString;

                                var ordemExpedicao1 = contexto.Expedicao.Where(p => p.codViagem == soAutomacaoModel.codViagem && p.numeroLoteAnimal == soAutomacaoModel.numeroLoteAnimal && p.codProdPA == soAutomacaoModel.codProdPA && p.caixaCaminhao == soAutomacaoModel.caixaCaminhao).ToList();
                                var caixas = ordemExpedicao1.GroupBy(pp => pp.caixaCaminhao).ToList();
                                Console.WriteLine(JsonSerializer.Serialize(ordemExpedicao1));
                                foreach (var ordemExpedicao2 in caixas)
                                {
                                    var envio = ordemExpedicao2.FirstOrDefault();

                                    Console.WriteLine("atualizando peso do pedido " + ordemExpedicao2.FirstOrDefault().codIntViagem);

                                    envio.filial = filial;
                                    envio.empresa = empresa;
                                    envio.pesoDosado = ordemExpedicao2.Sum(p => p.pesoDosado);
                                    HttpContent content = (HttpContent)new StringContent(JsonSerializer.Serialize<ExpedicaoModel>(envio), Encoding.UTF8, "application/json");
                                    var teste = (JsonSerializer.Serialize<ExpedicaoModel>(envio), Encoding.UTF8, "application/json");
                                    Console.WriteLine("TESTE-->");
                                    Console.WriteLine(teste);
                                    Console.WriteLine("<--TESTE");
                                    await client.PostAsync($"http://{api}/Comercial/Api/SoAutomacao/PostAtualizaPeso", content);
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"Erro: {ex}\n\n{ex.InnerException}");
                            return false;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine((object)ex);
                return false;
            }

            return true;
        }
        public async Task<bool> BuscaFicha(string token, string filial, string api, JsonSerializerOptions options)
        {
            var FichaTeste = 0m;
            var OrdemTeste = 0m;
            try
            {
                using (HttpClient client = new HttpClient())
                {
                    client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                    using (ConexaoCfg conexaoCfg = ConexaoFabrica.Criar())
                    {
                        var consultaString = $"http://{api}/Industria/Api/OrdemProducaoProgramacao/BuscarProgramacoesPendentesSigaFran?filialCodigo={filial}";
                        string retorno = await client.GetStringAsync(consultaString);
                        _logger.LogInformation(consultaString);

                        var fichas = JsonSerializer.Deserialize<List<RetornoBuscarProgramacoesPendentesSigaFranViewModel>>(retorno, options);
                        _logger.LogInformation("-----");
                        _logger.LogInformation(retorno);
                        _logger.LogInformation("-----");
                        foreach (var ficha in fichas)
                        {
                            FichaTeste = ficha.fichaTecnicaCodigo;
                            OrdemTeste = ficha.ordemProducaoCodigo;
                            if (ficha.fichaTecnicaSigaFranCodigo == 0)
                            { // quer dizer que não possui o vinculo com o gescooper, no gescooper
                                var codigoProduto = 0;

                                var testeFormula = conexaoCfg.FormulaItem
                                           .Where(p => p.CodFormula == (int)ficha.fichaTecnicaCodigo)
                                           .Any();

                                if (testeFormula)
                                {
                                    //já existe o cadastro no sigafran, só atualizar o código no final desse processo (deixa rolar)
                                }
                                else
                                {
                                    var formula = new Formula();
                                    formula.CodFormula = (int)ficha.fichaTecnicaCodigo;
                                    formula.CodIntFormula = (int)ficha.fichaTecnicaCodigo;
                                    formula.Versao = ficha.fichaTecnicaVersaoCodigo.ToString();
                                    formula.CodProd = Convert.ToInt32(ficha.produtoAcabadoIntegracaoCodigo);

                                    int.TryParse(ficha.produtoAcabadoIntegracaoCodigo, out codigoProduto);
                                    if (codigoProduto == 0)
                                        codigoProduto = ficha.produtoAcabadoCodigo;
                                    formula.CodProd = codigoProduto;

                                    formula.DescProd = ficha.produtoAcabadoNome;
                                    formula.Descricao = ficha.produtoAcabadoNome;
                                    //formula.CodLinha = ficha.fichaTecnicaLinhaProducaoCodigo; // QUando for usar linha só descomentar essas 2 linhas
                                    //if (formula.CodLinha == 0 || formula.CodLinha == null)
                                    formula.CodLinha = 1;
                                    formula.DataVigenciaInicial = ficha.fichaTecnicaDataVigenciaInicial;
                                    formula.DataVigenciaFinal = ficha.fichaTecnicaDataVigenciaFinal;
                                    formula.Tamanho = 0;
                                    formula.Usuario = 1000;
                                    formula.Status = "ATIVO";
                                    formula.DtModificacao = DateTime.Now;
                                    formula.RegLido = "TRA";
                                    conexaoCfg.Formula.Add(formula);
                                    conexaoCfg.SaveChanges();
                                }

                                int cont = 1;
                                foreach (var produto in ficha.Produtos)
                                {
                                    var testeFormulaItem = conexaoCfg.FormulaItem
                                            .Where(p => p.CodFormula == (int)ficha.fichaTecnicaCodigo)
                                            .Where(p => p.CodProd == produto.ProdutoCodigo)
                                            .Any();

                                    if (testeFormulaItem == false)
                                    {
                                        var produtoficha = new FormulaItem();
                                        produtoficha.CodFormula = (int)ficha.fichaTecnicaCodigo;

                                        // produtoficha.CodProd = produto.ProdutoCodigo;

                                        int.TryParse(produto.ProdutoIntegracaoCodigo, out codigoProduto);
                                        if (codigoProduto == 0)
                                        {
                                            codigoProduto = produto.ProdutoCodigo;
                                        }
                                        produtoficha.CodProd = codigoProduto;

                                        produtoficha.DescProd = produto.ProdutoNome;

                                        var fichaqtd = ficha.quantidade;
                                        if (fichaqtd == 0)
                                        {
                                            fichaqtd = 1;
                                        }
                                        produtoficha.QuantKg = Decimal.ToDouble(produto.QuantidadeUtilizada);
                                        produtoficha.CodFormulaItem = produto.ProdutoCodigo;
                                        produtoficha.QuantPercent = 0;
                                        produtoficha.Sequencia = cont;
                                        produtoficha.Ordem = cont;
                                        produtoficha.Usuario = 1000;
                                        produtoficha.DtModificacao = DateTime.Now;
                                        produtoficha.RegLido = "TRA";

                                        conexaoCfg.FormulaItem.Add(produtoficha);
                                        cont++;
                                        conexaoCfg.SaveChanges();
                                    }
                                }

                                var alteraFichas = conexaoCfg.Formula
                                                        .Where(o => o.CodFormula == (int)ficha.fichaTecnicaCodigo)
                                                        .Where(p => p.RegLido == "TRA")
                                                        .ToList();

                                var alteraItens = conexaoCfg.FormulaItem
                                                        .Where(o => o.CodFormula == (int)ficha.fichaTecnicaCodigo)
                                                        .Where(p => p.RegLido == "TRA")
                                                        .ToList();

                                foreach (var fichaAlt in alteraFichas)
                                {
                                    fichaAlt.RegLido = "NAO";
                                }
                                foreach (var item in alteraItens)
                                {
                                    item.RegLido = "NAO";
                                }
                                conexaoCfg.SaveChanges();

                                await client.GetStringAsync($"http://{api}/Industria/Api/OrdemProducaoProgramacao/AtualizarFichaTecnicaSigaFranCodigo?fichaTecnicaCodigo={ficha.fichaTecnicaCodigo}&sigaFranCodigo={ficha.fichaTecnicaCodigo}");
                                _logger.LogInformation("Atualiza ficha tecnica SigaFranCodigo");
                            }

                            var auxOrdem = conexaoCfg.OrdemProducao.Where(p => p.CodOrdemProducao == (int)ficha.ordemProducaoCodigo)
                                                                   .Select(p => p.CodOrdemProducao)
                                                                   .Any();
                            if (auxOrdem == false)
                            {
                                Console.WriteLine("Cadastrando OrdemProducao");
                                var ordemProducao = new OrdemProducao();
                                ordemProducao.CodOrdemProducao = ((int)ficha.ordemProducaoCodigo);
                                ordemProducao.CodFormula = ((int)ficha.fichaTecnicaCodigo); //referencia o ID
                                ordemProducao.CodIntFormula = ((int)ficha.fichaTecnicaCodigo);
                                ordemProducao.CodAditivo = 0;
                                ordemProducao.Quantidade = ficha.quantidade;
                                ordemProducao.DataEntradaOP = DateTime.Today.Date;
                                ordemProducao.DataEntregaProducao = DateTime.Today.Date;
                                ordemProducao.DescricaoOrdemProducao = ficha.descricao;
                                ordemProducao.TipoOrdemProducao = "A";
                                ordemProducao.TotalQuantidade = ((int)ficha.quantidadeBatelada);
                                ordemProducao.Prioridade = ((int)ficha.programacaoCodigo);
                                ordemProducao.QuantBat = ((int)ficha.quantidadeBatelada);
                                ordemProducao.CodGranja = 0;
                                ordemProducao.NrOrdem = ((int)ficha.ordemProducaoCodigo);
                                ordemProducao.CodLoteAnimal = "0";
                                ordemProducao.CodSiloDestino = 0;
                                ordemProducao.DtModificacao = DateTime.Now;
                                ordemProducao.Usuario = 1000;
                                ordemProducao.RegLido = "NAO";
                                Console.WriteLine("salvando a ordem " + ficha.ordemProducaoCodigo);
                                Console.WriteLine("salvando a prog " + ficha.programacaoCodigo);
                                conexaoCfg.OrdemProducao.Add(ordemProducao);
                                conexaoCfg.SaveChanges();
                            }


                            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                            //atualizar sit
                            Console.WriteLine($"AtualizarSituacaoProgramacoesBateladaPendentesSigaFran => ficha.ordemProducaoCodigo -> {ficha.ordemProducaoCodigo}");
                            var retornoSituacao = await client.GetStringAsync($"http://{api}/Industria/Api/OrdemProducaoProgramacao/AtualizarSituacaoProgramacoesBateladaPendentesSigaFran?ordemProducaoCodigo={ficha.ordemProducaoCodigo}&bateladaCodigo=0");
                            _logger.LogInformation("AtualizarSituacaoProgramacoesBateladaPendentesSigaFran");
                            Console.WriteLine(retornoSituacao.ToString());
                        }
                    }
                }
            }
            catch (Exception e)
            {
                _logger.LogError(e, $"Ordem {OrdemTeste} -- ficha {FichaTeste} -- FIlial {filial} -- API {api} \n\n{e.Message}\n\n{e.InnerException}");
                //Console.WriteLine(e.Message);
                //Console.WriteLine(e.InnerException);
                return false;
            }

            return true;
        }

        public async Task<bool> AtualizaProducao(string token, string filial, string api, JsonSerializerOptions options)
        {
            try
            {
                var Envio = new List<ProcessarProgramacaoApiViewModel>();
                using (HttpClient client = new HttpClient())
                {
                    client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

                    var producoesLista = BuscarProducoes();

                    foreach (var producao in producoesLista)
                    {
                        var producaoenvio = new ProcessarProgramacaoApiViewModel();
                        producaoenvio.BateladaCodigo = producao.BateladaCodigo;
                        producaoenvio.OrdemProducaoCodigo = producao.OrdemProducaoCodigo;
                        producaoenvio.ProgramacaoCodigo = producao.ProgramacaoCodigo;
                        producaoenvio.Quantidade = producao.Quantidade;
                        var produtoAgrupado = producao.Produtos.Select(p => p.ProdutoCodigo).Distinct().ToList();
                        foreach (var produtoIndividual in produtoAgrupado)
                        {
                            var produtoIns = new OrdemProducaoProgramacaoProdutoApiViewModel();
                            produtoIns.ProdutoCodigo = produtoIndividual;
                            produtoIns.QuantidadeUtilizada = producao.Produtos.Where(p => p.ProdutoCodigo == produtoIndividual).Sum(p => p.QuantidadeUtilizada);
                            producaoenvio.Produtos.Add(produtoIns);
                        }
                        Console.WriteLine($"atualizando BateladaCodigo {producao.BateladaCodigo} - OrdemProducaoCodigo {producao.OrdemProducaoCodigo}");

                        //_logger.LogInformation("atualizando ProgramacaoCodigo " + producao.ProgramacaoCodigo.ToString() + " || OrdemProducao Codigo " + producao.OrdemProducaoCodigo.ToString());
                        var jsonProgramacao = JsonSerializer.Serialize<ProcessarProgramacaoApiViewModel>(producaoenvio);
                        Console.WriteLine("---API--- INICIO JSON envio");
                        Console.WriteLine(jsonProgramacao.ToString());
                        Console.WriteLine("---API--- FIM JSON envio");
                        HttpContent content = (HttpContent)new StringContent(jsonProgramacao, Encoding.UTF8, "application/json");
                        Console.WriteLine("3");

                        var RetProd = client.PostAsync($"http://{api}/Industria/Api/OrdemProducaoProgramacao/ProcessarProgramacao", content);

                        Console.WriteLine($"4 - http://{api}/Industria/Api/OrdemProducaoProgramacao/AtualizarSituacaoProgramacoesBateladaFinalizadaSigaFran?ordemProducaoCodigo=" + producao.OrdemProducaoCodigo + "&bateladaCodigo=" + producao.BateladaCodigo);

                        var retornoSituacao = await client.GetStringAsync($"http://{api}/Industria/Api/OrdemProducaoProgramacao/AtualizarSituacaoProgramacoesBateladaFinalizadaSigaFran?ordemProducaoCodigo={producao.OrdemProducaoCodigo}&bateladaCodigo={producao.BateladaCodigo}");

                        _logger.LogInformation("AtualizarSituacaoProgramacoesBateladaFinalizadaSigaFran");
                        Console.WriteLine(retornoSituacao.ToString());
                        Console.WriteLine("5");
                    }
                    Console.WriteLine(Envio);
                }
            }
            catch (Exception e)
            {
                _logger.LogError(e, $"{e.Message}\n\n{e.InnerException}");
                return false;
            }

            return true;
        }
        public async Task<List<RetornoBuscarProgramacoesPendentesNaoFinalizadasSigaFranViewModel>> BuscarErros(string token, string filial, string api, JsonSerializerOptions options, List<RetornoBuscarProgramacoesPendentesNaoFinalizadasSigaFranViewModel> listaBak)
        {
            try
            {
                using (HttpClient client = new HttpClient())
                {
                    using (ConexaoCfg conexaoCfg = ConexaoFabrica.Criar())
                    {
                        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                        var retorno = await client.GetStringAsync($"http://{api}/Industria/Api/OrdemProducaoProgramacao/BuscarProgramacoesNaoFinalizadasSigaFran?filialCodigo={filial}");
                        Console.WriteLine("");
                        var lista = JsonSerializer.Deserialize<List<RetornoBuscarProgramacoesPendentesNaoFinalizadasSigaFranViewModel>>(retorno);

                        foreach (var item in lista)
                        {
                            var count = listaBak.Where(p => p.sequencialSigafran == item.sequencialSigafran)
                                               .Where(p => p.ordemProducaoCodigo == item.ordemProducaoCodigo).Count();
                            if (count == 0)
                            {
                                var retornoProducao = conexaoCfg.Producao.Where(p => p.RegLido == "Sim")
                                                                         .Where(p => p.Controle == item.ordemProducaoCodigo)
                                                                         .Where(p => p.NumeroBatelada == item.sequencialSigafran)
                                                                         .ToList();

                                if (retornoProducao.Count > 0)
                                {
                                    var objEnvio = new ProcessarProgramacaoApiViewModel();
                                    var producaoDistinct = retornoProducao.Select(p => p.CodProdMP).Distinct().ToList();
                                    foreach (var produtoProd in producaoDistinct)
                                    {
                                        var produto = new OrdemProducaoProgramacaoProdutoApiViewModel();
                                        produto.ProdutoCodigo = produtoProd;
                                        var retornopeso = retornoProducao.Where(p => p.CodProdPA == produtoProd).Sum(p => p.PesoDosado);
                                        var pesodosado = Convert.ToDecimal(retornopeso);
                                        pesodosado = Math.Round(pesodosado, 3);
                                        produto.QuantidadeUtilizada = pesodosado;
                                        objEnvio.Produtos.Add(produto);
                                    }
                                    objEnvio.OrdemProducaoCodigo = retornoProducao.FirstOrDefault().Controle;
                                    objEnvio.BateladaCodigo = retornoProducao.FirstOrDefault().NumeroBatelada;
                                    objEnvio.ProgramacaoCodigo = 0;
                                    objEnvio.Quantidade = objEnvio.Produtos.Sum(p => p.QuantidadeUtilizada ?? 0);
                                    var jsonProgramacao = JsonSerializer.Serialize(objEnvio);
                                    HttpContent content = new StringContent(jsonProgramacao, Encoding.UTF8, "application/json");
                                    var RetProd = client.PostAsync($"http://{api}/Industria/Api/OrdemProducaoProgramacao/ProcessarProgramacao", content);
                                }
                            }

                        }
                        listaBak = lista;
                    }
                }
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                Console.WriteLine(e.Message);
                Console.WriteLine(e.InnerException);
            }
            return (listaBak);
        }
        private static List<ProcessarProgramacaoApiViewModel> BuscarProducoes()
        {
            List<ProcessarProgramacaoApiViewModel> producoesLista = new List<ProcessarProgramacaoApiViewModel>();

            using (ConexaoCfg conexaoCfg = ConexaoFabrica.Criar())
            {
                var producoes = conexaoCfg.Producao.Where(p => p.RegLido == "NAO")
                                                         .Where(o => o.Controle > 0)
                                                         .Select(p => p.Controle)
                                                         .Distinct()
                                                         .ToList();

                Console.WriteLine($"Produções encontradas: {producoes.Count()}");

                foreach (var ordemDeProducaoCodigo in producoes)
                {
                    var bateladas = conexaoCfg.Producao
                                            .Where(o => o.Controle == ordemDeProducaoCodigo)
                                            .Where(o => o.RegLido == "NAO")
                                            .Select(o => o.NumeroBatelada)
                                            .Distinct()
                                            .ToList();


                    foreach (var batelada in bateladas)
                    {
                        var producao = new ProcessarProgramacaoApiViewModel();

                        producao.OrdemProducaoCodigo = ordemDeProducaoCodigo;
                        producao.ProgramacaoCodigo = 0;
                        producao.BateladaCodigo = batelada;

                        var materiasPrimas = conexaoCfg.Producao
                                                .Where(o => o.Controle == ordemDeProducaoCodigo)
                                                .Where(o => o.NumeroBatelada == batelada)
                                                .ToList();

                        foreach (var itemMateriaPrima in materiasPrimas)
                        {
                            var produto = new OrdemProducaoProgramacaoProdutoApiViewModel();
                            produto.ProdutoCodigo = itemMateriaPrima.CodProdMP;
                            produto.QuantidadeUtilizada = Math.Round(itemMateriaPrima.PesoDosado ?? 0, 3);
                            producao.Produtos.Add(produto);

                            itemMateriaPrima.RegLido = "SIM";
                            conexaoCfg.SaveChanges();
                        }

                        producao.Quantidade = producao.Produtos.Sum(p => p.QuantidadeUtilizada) ?? 0;
                        Console.WriteLine($"1 --- producao {producao.OrdemProducaoCodigo}");
                        if (producao != null)
                        {
                            Console.WriteLine("5");
                            producoesLista.Add(producao);
                        }
                        Console.WriteLine("6");
                    }
                }
            }

            return producoesLista;
        }


        #region Versões antigas

        #region Versão 1
        public async void BuscaFichaV1(string token, string filial, string api, JsonSerializerOptions options)
        {
            try
            {
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                using (ConexaoCfg conexaoCfg = ConexaoFabrica.Criar())
                {
                    string ret = @"[
                  {
                    ""programacaoCodigo"": 7,
                    ""ordemProducaoCodigo"": 66976,
                    ""fichaTecnicaCodigo"": 54,
                    ""produtoAcabadoCodigo"": 4412,
                    ""produtoAcabadoNome"": ""RACAO PARCEIRO AVES CORTE INICIAL 05KG"",
                    ""produtoAcabadoIntegracaoCodigo"": """",
                    ""dataInicioProducao"": ""2022-01-26T11:02:32"",
                    ""quantidade"": 200,
                    ""descricao"": ""RACAO PARCEIRO AVES CORTE INICIAL 05KG (4412) | OP: 66976 / 7"",
                    ""produtos"": [
                      {
                        ""produtoCodigo"": 18362,
                        ""produtoNome"": ""EMBALAGENS PAPEL COOPERAGUDO 5KG"",
                        ""produtoIntegracaoCodigo"": ""1"",
                        ""quantidadeUtilizada"": 200      },
                      {
                        ""produtoCodigo"": 19075,
                        ""produtoNome"": ""FIO DE POLIESTER 163"",
                        ""produtoIntegracaoCodigo"": ""axterixco"",
                        ""quantidadeUtilizada"": 50      },
                      {
                        ""produtoCodigo"": 84628,
                        ""produtoNome"": ""RÓTULOS COOPERAGUDO"",
                        ""produtoIntegracaoCodigo"": ""Obelixco"",
                        ""quantidadeUtilizada"": 200      },
                      {
                        ""produtoCodigo"": 170438,
                        ""produtoNome"": ""ROTULOS P/RAÇÂO RIBBON"",
                        ""produtoIntegracaoCodigo"": ""O DUO"",
                        ""quantidadeUtilizada"": 200      }
                    ]
                  },
                  {
                    ""programacaoCodigo"": 9,
                    ""ordemProducaoCodigo"": 66976,
                    ""fichaTecnicaCodigo"": 54,
                    ""produtoAcabadoCodigo"": 4412,
                    ""produtoAcabadoNome"": ""RACAO PARCEIRO AVES CORTE INICIAL 05KG"",
                    ""produtoAcabadoIntegracaoCodigo"": """",
                    ""dataInicioProducao"": ""2022-01-26T11:02:32"",
                    ""quantidade"": 300,
                    ""descricao"": ""RACAO PARCEIRO AVES CORTE INICIAL 05KG (4412) | OP: 66976 / 9"",
                    ""produtos"": [
                      {
                        ""produtoCodigo"": 18362,
                        ""produtoNome"": ""EMBALAGENS PAPEL COOPERAGUDO 5KG"",
                        ""produtoIntegracaoCodigo"": ""1"",
                        ""quantidadeUtilizada"": 300      },
                      {
                        ""produtoCodigo"": 19075,
                        ""produtoNome"": ""FIO DE POLIESTER 163"",
                        ""produtoIntegracaoCodigo"": ""axterixco"",
                        ""quantidadeUtilizada"": 75      },
                      {
                        ""produtoCodigo"": 84628,
                        ""produtoNome"": ""RÓTULOS COOPERAGUDO"",
                        ""produtoIntegracaoCodigo"": ""Obelixco"",
                        ""quantidadeUtilizada"": 300      },
                      {
                        ""produtoCodigo"": 170438,
                        ""produtoNome"": ""ROTULOS P/RAÇÂO RIBBON"",
                        ""produtoIntegracaoCodigo"": ""O DUO"",
                        ""quantidadeUtilizada"": 300      }
                    ]
                  },
                  {
                    ""programacaoCodigo"": 10,
                    ""ordemProducaoCodigo"": 66976,
                    ""fichaTecnicaCodigo"": 54,
                    ""produtoAcabadoCodigo"": 4412,
                    ""produtoAcabadoNome"": ""RACAO PARCEIRO AVES CORTE INICIAL 05KG"",
                    ""produtoAcabadoIntegracaoCodigo"": """",
                    ""dataInicioProducao"": ""2022-01-26T11:02:32"",
                    ""quantidade"": 500,
                    ""descricao"": ""RACAO PARCEIRO AVES CORTE INICIAL 05KG (4412) | OP: 66976 / 10"",
                    ""produtos"": [
                      {
                        ""produtoCodigo"": 19075,
                        ""produtoNome"": ""FIO DE POLIESTER 163"",
                        ""produtoIntegracaoCodigo"": ""axterixco"",
                        ""quantidadeUtilizada"": 125      },
                      {
                        ""produtoCodigo"": 84628,
                        ""produtoNome"": ""RÓTULOS COOPERAGUDO"",
                        ""produtoIntegracaoCodigo"": ""Obelixco"",
                        ""quantidadeUtilizada"": 500      }
                    ]
                  }
                ]";
                    string retorno = await client.GetStringAsync("http://" + api + "/Industria/Api/OrdemProducaoProgramacao/BuscarProgramacoesPendentesSigaFran/" + filial);

                    var fichas = JsonSerializer.Deserialize<List<FichaModel>>(retorno, options);
                    foreach (var ficha in fichas)
                    {
                        var testeficha = conexaoCfg.Formula.Where(p => p.CodFormula == ficha.programacaoCodigo).ToList();
                        if (testeficha.Count == 0)
                        {
                            var index1 = conexaoCfg.Formula
                                       .OrderByDescending(p => p.ID)
                                       .Select(p => p.ID)
                                       .FirstOrDefault();


                            var formula = new Formula();
                            formula.CodFormula = ficha.programacaoCodigo;
                            formula.CodIntFormula = ficha.programacaoCodigo;
                            formula.Versao = "1";
                            formula.CodProd = ficha.produtoAcabadoCodigo;
                            formula.DescProd = ficha.produtoAcabadoNome;
                            formula.Descricao = ficha.produtoAcabadoNome;//$"{ficha.programacaoCodigo} - {ficha.produtoAcabadoNome.Trim()}";
                            formula.CodLinha = 1;
                            formula.DataVigenciaInicial = ficha.dataInicioProducao;
                            formula.DataVigenciaFinal = new DateTime(2500, 12, 31);
                            formula.Tamanho = 0;
                            formula.Usuario = 1000;
                            formula.Status = "ATIVO";
                            formula.DtModificacao = DateTime.Now;
                            formula.RegLido = "TRA";

                            conexaoCfg.Formula.Add(formula);
                            conexaoCfg.SaveChanges();
                            var index = conexaoCfg.Formula
                                       .OrderByDescending(p => p.ID)
                                       .FirstOrDefault();

                        }
                        int cont = 1;
                        foreach (var produto in ficha.Produtos)
                        {
                            var prodbusca = conexaoCfg.ProdutoSigaFran.Where(p => p.CodIntProd == produto.produtoIntegracaoCodigo).FirstOrDefault();
                            if (prodbusca is null)
                            {
                                var prodinsert = new Cad_Produto();
                                prodinsert.ID = 0;
                                prodinsert.CodIntProd = produto.produtoIntegracaoCodigo;
                                prodinsert.CodProd = produto.produtoCodigo;
                                prodinsert.Descricao = produto.produtoNome;
                                prodinsert.Usuario = 1000;
                                prodinsert.DtModificacao = DateTime.Now;
                                prodinsert.RegLido = "NAO";
                                conexaoCfg.ProdutoSigaFran.Add(prodinsert);
                                conexaoCfg.SaveChanges();
                            }
                            else
                            {
                                var prodEnvio = new ProdutoVinculoModel();
                                prodEnvio.CodigoVinculo = produto.produtoIntegracaoCodigo;
                                var contentdes = JsonSerializer.Serialize<ProdutoVinculoModel>(prodEnvio);

                                HttpContent content = (HttpContent)new StringContent(contentdes, Encoding.UTF8, "application/json");
                                var RetProd = client.PostAsync("http://" + api.ToString() + "/Cadastro/Api/SoAutomacao/BuscaProdutos", content);
                                string apiResponse = await RetProd.Result.Content.ReadAsStringAsync();
                                var ProdutoRetono = JsonSerializer.Deserialize<EntidadeProdSigaFran>(apiResponse, options);
                                prodbusca.CodIntProd = ProdutoRetono.CodIntProd;
                                prodbusca.Descricao = ProdutoRetono.Descricao;
                                prodbusca.Usuario = 1000;
                                prodbusca.DtModificacao = DateTime.Now;
                                prodbusca.Abreviatura = ProdutoRetono.Descricao.Substring(0, 5);
                                prodbusca.UnidMedida = "KG";
                                prodbusca.Densidade = 1000;
                                conexaoCfg.Entry<Cad_Produto>(prodbusca).State = EntityState.Modified;
                                conexaoCfg.SaveChanges();
                                Console.WriteLine(ProdutoRetono);
                            }

                            var prodbuscaficha = conexaoCfg.ProdutoSigaFran.Where(p => p.CodIntProd == produto.produtoIntegracaoCodigo).FirstOrDefault();
                            var testeFormulaItem = conexaoCfg.FormulaItem.Where(p => p.CodFormula == ficha.programacaoCodigo && (p.Sequencia == cont || p.CodProd == prodbuscaficha.CodProd)).ToList();
                            if (testeFormulaItem.Count == 0)
                            {
                                var produtoficha = new FormulaItem();
                                produtoficha.CodProd = prodbuscaficha.CodProd;
                                produtoficha.DescProd = prodbuscaficha.Descricao;

                                var fichaqtd = ficha.quantidade;
                                if (fichaqtd == 0)
                                {
                                    fichaqtd = 1;
                                }
                                produtoficha.QuantKg = Decimal.ToDouble(produto.quantidadeUtilizada);

                                produtoficha.CodFormulaItem = produto.produtoCodigo;
                                produtoficha.QuantPercent = 0;
                                produtoficha.CodFormula = ficha.programacaoCodigo;
                                produtoficha.Sequencia = cont;
                                produtoficha.Ordem = cont;
                                produtoficha.Usuario = 1000;
                                produtoficha.DtModificacao = DateTime.Now;
                                produtoficha.RegLido = "TRA";
                                conexaoCfg.FormulaItem.Add(produtoficha);
                                conexaoCfg.SaveChanges();
                                cont++;
                                //var buscaprodutos = _contexto.Buscar<Cad_Produto>();
                            }

                        }

                        var ordemProducao = new OrdemProducao();
                        ordemProducao.CodOrdemProducao = ficha.programacaoCodigo;
                        ordemProducao.CodFormula = ficha.programacaoCodigo; //referencia o ID
                        ordemProducao.CodIntFormula = ficha.programacaoCodigo;
                        ordemProducao.CodAditivo = 0;
                        ordemProducao.Quantidade = ficha.quantidade;
                        ordemProducao.DataEntradaOP = DateTime.Today.Date;
                        ordemProducao.DataEntregaProducao = DateTime.Today.Date;
                        ordemProducao.DescricaoOrdemProducao = ficha.descricao;
                        ordemProducao.TipoOrdemProducao = "A";
                        ordemProducao.TotalQuantidade = 1;
                        ordemProducao.Prioridade = ficha.ordemProducaoCodigo;
                        ordemProducao.QuantBat = 1;
                        ordemProducao.CodGranja = 0;
                        ordemProducao.NrOrdem = ficha.ordemProducaoCodigo;
                        ordemProducao.CodLoteAnimal = "0";
                        ordemProducao.CodSiloDestino = 0;
                        ordemProducao.DtModificacao = DateTime.Now;
                        ordemProducao.Usuario = 1000;
                        ordemProducao.RegLido = "NAO";
                        Console.WriteLine("salvando a ordem " + ficha.ordemProducaoCodigo);
                        Console.WriteLine("salvando a prog " + ficha.programacaoCodigo);
                        conexaoCfg.OrdemProducao.Add(ordemProducao);
                        conexaoCfg.SaveChanges();


                        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                        //atualizar sit
                        Console.WriteLine(await client.GetStringAsync("http://" + api + "/Industria/Api/OrdemProducaoProgramacao/AtualizarSituacaoProgramacoesPendentesSigaFran/" + ficha.programacaoCodigo + "/" + ficha.ordemProducaoCodigo));
                    }
                    var alteraFichas = conexaoCfg.Formula.Where(p => p.RegLido == "TRA");
                    var alteraItens = conexaoCfg.FormulaItem.Where(p => p.RegLido == "TRA");
                    foreach (var ficha in alteraFichas)
                    {
                        ficha.RegLido = "NAO";
                    }
                    foreach (var item in alteraItens)
                    {
                        item.RegLido = "NAO";
                    }
                    conexaoCfg.SaveChanges();

                }
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                Console.WriteLine(e.Message);
                Console.WriteLine(e.InnerException);
            }
        }
        public async void AtualizaProducaoV1(string token, string filial, string api, JsonSerializerOptions options)
        {
            try
            {
                var Envio = new List<ProcessarProgramacaoApiViewModel>();
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                using (ConexaoCfg conexaoCfg = ConexaoFabrica.Criar())
                {
                    var retornoProducao = conexaoCfg.Producao.Where(p => p.RegLido == "NAO")
                                                             .Select(p => p.Controle)
                                                             .Distinct()
                                                             .ToList();
                    Console.WriteLine(retornoProducao.Count() + " Produções encontradas");
                    foreach (var codigo in retornoProducao)
                    {
                        var producaoMateriasPrimas = conexaoCfg.Producao.Where(p => p.Controle == codigo)
                                                            .Where(p => p.RegLido == "NAO")
                                                            .ToList();

                        var producao = new ProcessarProgramacaoApiViewModel();
                        //producao.ProgramacaoCodigo = producaoMateriasPrimas.FirstOrDefault().NumeroProducao;
                        //producao.OrdemProducaoCodigo = producaoMateriasPrimas.FirstOrDefault().Ordem;
                        var ordem = conexaoCfg.OrdemProducao.Where(p => p.CodFormula == producaoMateriasPrimas.FirstOrDefault().CodFormula).FirstOrDefault();

                        producao.OrdemProducaoCodigo = Convert.ToDecimal(ordem.NrOrdem);
                        producao.ProgramacaoCodigo = Convert.ToDecimal(ordem.CodIntFormula);

                        foreach (var itemMateriaPrima in producaoMateriasPrimas)
                        {
                            var produto = new OrdemProducaoProgramacaoProdutoApiViewModel();

                            var prodEnvio = new ProdutoVinculoModel();
                            prodEnvio.CodigoVinculo = itemMateriaPrima.CodProdMP.ToString();
                            var contentdes = JsonSerializer.Serialize<ProdutoVinculoModel>(prodEnvio);

                            HttpContent content = (HttpContent)new StringContent(contentdes, Encoding.UTF8, "application/json");
                            var RetProd = client.PostAsync("http://" + api.ToString() + "/Cadastro/Api/SoAutomacao/BuscaProdutos", content);
                            string apiResponse = await RetProd.Result.Content.ReadAsStringAsync();
                            var ProdutoRetono = JsonSerializer.Deserialize<EntidadeProdSigaFran>(apiResponse, options);

                            produto.ProdutoCodigo = ProdutoRetono.CodProd;
                            produto.QuantidadeUtilizada = Math.Round(itemMateriaPrima.PesoDosado ?? 0, 3);
                            producao.Produtos.Add(produto);
                            itemMateriaPrima.RegLido = "SIM";
                            conexaoCfg.SaveChanges();
                        }
                        producao.Quantidade = producao.Produtos.Sum(p => p.QuantidadeUtilizada) ?? 0;
                        //Envio.Add(producao);
                        Console.WriteLine("1 producao" + producao.OrdemProducaoCodigo.ToString());
                        if (producao != null)
                        {
                            Console.WriteLine("atualizando ProgramacaoCodigo " + producao.ProgramacaoCodigo.ToString() + " || OrdemProducao Codigo " + producao.OrdemProducaoCodigo.ToString());

                            _logger.LogInformation("atualizando ProgramacaoCodigo " + producao.ProgramacaoCodigo.ToString() + " || OrdemProducao Codigo " + producao.OrdemProducaoCodigo.ToString());
                            var jsonProgramacao = JsonSerializer.Serialize<ProcessarProgramacaoApiViewModel>(producao);
                            Console.WriteLine("---API---");
                            Console.WriteLine(jsonProgramacao.ToString());
                            Console.WriteLine("---API---");
                            HttpContent content = (HttpContent)new StringContent(jsonProgramacao, Encoding.UTF8, "application/json");
                            Console.WriteLine("3");
                            _logger.LogInformation("ProcessarProgramacao: " + jsonProgramacao.ToString());
                            var RetProd = client.PostAsync("http://" + api + "/Industria/Api/OrdemProducaoProgramacao/ProcessarProgramacao", content);
                            _logger.LogInformation("AtualizarSituacaoProgramacoesFinalizadaSigaFran: /" + producao.ProgramacaoCodigo.ToString() + "/" + producao.OrdemProducaoCodigo.ToString());
                            Console.WriteLine("4 - http://" + api + "/Industria/Api/OrdemProducaoProgramacao/AtualizarSituacaoProgramacoesFinalizadaSigaFran/" + producao.ProgramacaoCodigo + "/" + producao.OrdemProducaoCodigo);
                            Console.WriteLine(await client.GetStringAsync("http://" + api + "/Industria/Api/OrdemProducaoProgramacao/AtualizarSituacaoProgramacoesFinalizadaSigaFran/" + producao.ProgramacaoCodigo + "/" + producao.OrdemProducaoCodigo));
                            Console.WriteLine("5");
                        }
                        Console.WriteLine("6");
                    }
                }
                Console.WriteLine(Envio);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                //Console.WriteLine(e);
                //Console.WriteLine(e.InnerException);
            }



            //var prodEnvio = new ProdutoVinculoModel();
            //prodEnvio.CodigoVinculo = produto.produtoIntegracaoCodigo;
            //var contentdes = JsonSerializer.Serialize<ProdutoVinculoModel>(prodEnvio);

            //HttpContent content = (HttpContent)new StringContent(contentdes, Encoding.UTF8, "application/json");
            //var RetProd = client.PostAsync("http://" + api.ToString() + "/Api/SoAutomacao/BuscaProdutos", content);
            //string apiResponse = await RetProd.Result.Content.ReadAsStringAsync();
            //var ProdutoRetono = JsonSerializer.Deserialize<EntidadeProdSigaFran>(apiResponse, options);

            //Console.WriteLine(await client.GetStringAsync("http://" + api + "/Api/SoAutomacao/SitParaEnviado/" + filial));
        }
        #endregion
        #endregion
    }
}